
# Transposition function
def transposition_encrypt(plaintext, key):
    # Ensure the plaintext length is divisible by the key length
    while len(plaintext) % len(key) != 0:
        plaintext += ' '

    # Create a matrix based on the key length
    n = len(key)
    matrix = [plaintext[i:i+n] for i in range(0, len(plaintext), n)]

    # Create transposed text based on key order
    sorted_key = sorted(list(key))
    transposed_text = ''
    for k in sorted_key:
        column_index = key.index(k)
        for row in matrix:
            transposed_text += row[column_index]

    return transposed_text

# Caesar cipher encryption function
def caesar_cipher_encrypt(plaintext, shift):
    encrypted_text = ''
    for char in plaintext:
        if char.isalpha():  # Encrypt letters only
            shift_amount = 65 if char.isupper() else 97
            encrypted_text += chr((ord(char) - shift_amount + shift) % 26 + shift_amount)
        else:
            encrypted_text += char  # Leave other characters unchanged

    return encrypted_text

# Entry data
original_plaintext = "Anton Maestre Security and Vulnerability in Networks"
transposition_key = "34512"  # Transposition key
caesar_shift = 1  # Caesar cipher 

# Calculate the encryption
original_transposed = transposition_encrypt(original_plaintext, transposition_key)
original_ciphertext = caesar_cipher_encrypt(original_transposed, caesar_shift)

print("Original plain text: ", original_plaintext)
print("Original transposed text: ", original_transposed)
print("Original ciphertext: ", original_ciphertext)

