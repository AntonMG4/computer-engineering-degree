"INFORMATION FILE ABOUT THE CODE"

***PACKAGE REQUIEREMENTS***

matplotlib:
- pip install matplotlib

Crypto:
- pip install pycryptodome
This library is already included in the directory, so its installation would not
be necessary.

***DESCRIPTION***

The scripts are designed to implement and analyse various encryption techniques.

- task1.py:
This script shows how the transposition and caesar cipher encrypt work.

The `transposition_encrypt` function performs encryption using the transposition 
cipher, rearranging the characters of the plaintext based on a key. Additionally, the 
`caesar_cipher_encrypt` function implements the Caesar cipher, shifting letters 
in the plaintext by a specified number of positions.

- task2.py:
In this code file, it is posible to analyse the avalanche effect of the transposition 
and caesar cipher encrypt.

To analyse the encryption methods, the script calculates the avalanche effect, which 
measures the percentage of differing bits between two binary strings. This is done using 
the `calculate_avalanche_effect` and the `text_to_binary1` functions. The 
`repeated_encryption_analysis1` function evaluates the avalanche effect and computation 
time of repeated encryption using transposition and Caesar cipher techniques.

- task4.py:
This file improves the avalanche effect by adding the Vigènere cipher to the transposition
and Caesar cipher encryption.

The `vigenere_cipher_encrypt` function applies the Vigenère cipher, a method that uses a 
keyword to shift letters in the plaintext. The `repeated_encryption_analysis2` function 
performs a comprehensive analysis including the Vigenère cipher (by calling the 
`combined_encryption` function). Finally, the code generates plots showing the relationship 
between avalanche effect and computation time.

- task5_FirstOption.py:
In this part, the file encrypts the texts using a combination of transposition and Caesar 
cipher in CBC mode. 

The `repeated_encryption_analysis3` function calculates the avalanche effect of this encryption 
by calling the `combined_encryption_cbc`, which XORed the blocks before encrypting them 
(`xor_blocks`).

- task5_SecondOption.py:
This code performs the encryption of texts using AES in CBC mode. 

The `aes_encrypt` function encrypts text using this method, and the `repeated_encryption_analysis4` 
function focuses on AES encryption, analyzing its effect with different initialization vectors. 

