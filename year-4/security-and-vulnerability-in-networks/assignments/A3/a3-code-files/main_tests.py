import threading
import time
from queue import Queue, Empty
from blockchain import Blockchain
from wallet import Wallet

# Initialize the blockchain with a transaction limit
max_tx_per_block = 10  # Maximum transactions per block
difficulty = 3  # Set a low difficulty
delay = 0.02
transaction_queue = Queue()
blockchain = Blockchain(
    max_transactions_per_block=max_tx_per_block, difficulty=difficulty
)

# Transaction Rate Test
num = 1
while num <= 4:
    # Define the number of transactions and duration for the throughput test
    print("\n--- TRANSACTION RATE TEST ---")
    print("Testing...")
    num_transactions = 200  # Total transactions to simulate
    duration = 5           # Duration in seconds to run the test
    blockchain.max_transactions_per_block = 10*num # Set the new value

    # Measure the throughput
    transaction_rate = blockchain.measure_throughput(num_transactions, duration)
    num = num + 1

print("Press Enter to continue...")
input()

blockchain.max_transactions_per_block = 10

# Create wallets for users
users = {}
for i in range(10):
    user_id = f"User_{i}"
    users[user_id] = Wallet()


# Function to continuously generate transactions
transactions = []  # Store all created transactions for testing
for i in range(1, 102):
    sender_id = f"User_{i % 10}"
    recipient_id = f"User_{(i + 1) % 10}"
    amount = i * 0.1
    sender_wallet = users[sender_id]
    recipient_wallet = users[recipient_id]

    transaction = sender_wallet.create_transaction(recipient_wallet.address, amount)
    transactions.append(transaction)  # Keep track of transactions

    # last transcation will be used to test the invalid case of the transcation inclusion.
    if i <= 100:
        if blockchain.add_transaction(transaction):
            print(f"Transaction {i} added: {transaction}")
        else:
            print(f"Transaction {i} is invalid and was discarded.")


# Mining Speed Test
print("\n--- MINING SPEED TEST ---")
difficulty_levels = [1, 2, 3, 4, 5]  # Example difficulty levels
blockchain.experiment_mining_speed(difficulty_levels)
blockchain.plot_mining_results()
