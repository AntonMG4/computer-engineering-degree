-- INFORMATION FILE FOR THE SECOND ASSIGNMENT --

This document aims to explain the different functions of each of the codes 
provided in the directory.

# REQUIREMENTS:

AES in CBC mode takes imports from the Crypto library. To avoid requiring 
an installation of it, this library is provided in the directory.


# README for `task1.py`

This script implements the **Diffie-Hellman key exchange** algorithm, which
allows two parties (Alice and Bob) to securely establish a shared secret 
over an insecure channel. 

The process begins by defining two public parameters: `p` (a large prime 
number) and `g` (a primitive root modulo `p`). Both Alice and Bob generate 
their own private keys, `a` and `b`, which remain secret. Using these 
private keys and the public parameters, they compute their respective public
keys and exchange them.

Once the public keys are exchanged, each party uses the other's public key 
and their own private key to compute the shared secret. The script verifies
that both computed shared secrets are identical, ensuring a successful key 
exchange.

It will output the private keys, public keys, and the shared secret. This 
implementation demonstrates the foundation of secure communication via the 
Diffie-Hellman algorithm.


# README for `task2.py`

This script demonstrates the **Diffie-Hellman key exchange** combined with 
an **XOR-based HMAC** implementation for message authentication. It allows 
Alice and Bob to establish a shared secret and use it to verify the 
integrity of messages exchanged between them.

The script begins by obtaining the shared secret in the same way as in 
'task1.py'.

The shared secret is then used as the key for an XOR-based HMAC function,
which ensures message integrity by generating a unique HMAC tag for the 
message "Hello dear friend." The XOR-based HMAC function mimics traditional
HMAC functionality but uses a simple XOR operation for hashing, making it 
easier to understand how HMAC works conceptually.

The output will display Alice's and Bob's public keys, the shared secret, 
the original message, and its corresponding HMAC tag, ensuring that the 
message can be authenticated. This implementation demonstrates both secure 
key exchange and message authentication.


# README for `task2.2.py`

This script demonstrates the **Diffie-Hellman key exchange** combined with 
a more robust **HMAC using SHA-256** for message authentication. The 
implementation allows two parties, Alice and Bob, to securely establish a 
shared secret and use it to generate an HMAC tag that ensures the integrity 
of the messages exchanged.

The implementation of the script is very similar to task2.py. The only 
notable difference is that in this code, the HMAC tag is calculated using a 
function with SHA-256. This hash mechanism is imported from the hashlib 
library.


# README for `task3.py`

This script implements a secure communication framework that combines 
**Diffie-Hellman key exchange**, **HMAC with SHA-256**, and **AES 
encryption in CBC mode**. 

When the shared secret and the HMAC with SHA-256 tag are generated, as 
already seen in task1.py and task2.2.py, the original message and its HMAC 
tag are concatenated and encrypted using AES in CBC mode, with a randomly 
generated initialization vector (IV) to enhance security. 

The script outputs the public keys, shared secret, original message, HMAC 
tag, encrypted ciphertext, and the decrypted message, verifying that the 
HMAC matches to confirm message authenticity. This implementation 
effectively demonstrates the integration of key exchange, message 
authentication, and encryption to create a secure communication system.

AES in CBC mode takes imports from the Crypto library. To avoid requiring 
an installation of it, this library is provided in the directory.


# README for `task4.py`

This script implements a secure communication framework utilizing 
**Diffie-Hellman key exchange**, **HMAC with SHA-256** for message 
integrity, **AES encryption in CBC mode** and the **Single Ratchet 
mechanism** for dynamic key management. It enables two parties, Alice and 
Bob, to establish a shared secret and use it for secure message transmission.

The process begins generating the shared secret, which serves as the basis 
for HMAC generation and message encryption.

The script employs the Single Ratchet mechanism, which allows Alice and Bob 
to update their chain keys for each message sent, enhancing security. 
For each round of communication, the sender ratchets their chain key and 
derives a new message key, which is used to encrypt the message with AES 
in CBC mode. Each encrypted message includes an HMAC tag, ensuring the 
integrity of the message.

The output will show the public keys, shared secret, new chain keys for each 
round, encrypted ciphertexts, and decrypted messages. The implementation 
demonstrates a robust framework for secure communication, emphasizing the 
effectiveness of combining multiple cryptographic techniques.


# README for `task5.py`

This script implements a secure communication framework utilizing the 
**Double Ratchet mechanism** for dynamic key management, combined with 
**Diffie-Hellman key exchange**, **HMAC with SHA-256** for message integrity, 
and **AES encryption in CBC mode** for message confidentiality. It allows 
two parties, Alice and Bob, to securely communicate while continuously 
updating their encryption keys.

Just like before, the process begins generating the shared secret, which is 
used for HMAC generation and the creation of the initial root key. 

The **Double Ratchet mechanism** is used across multiple rounds. In 
even-numbered rounds, Alice ratchets her chain key to derive a new message 
key, combines the message with an HMAC tag, and encrypts it with AES before 
sending it to Bob. In odd-numbered rounds, Bob performs a similar process. 
Upon receiving a message, the recipient ratchets their chain key, decrypts 
the ciphertext, and verifies the message's integrity by recalculating the 
HMAC.

Additionally, every three rounds, both parties perform a DH ratchet to 
generate new DH key pairs and refresh their shared secret, enhancing 
security and protecting past communications from potential key compromises. 

The output will display Alice's and Bob's public keys, the shared secret, 
new chain keys for each round, encrypted ciphertexts, and decrypted messages;
in addition to the DH keys pairs generation every three rounds.

The implementation effectively demonstrates the integration of multiple 
cryptographic techniques to create a resilient communication system, 
ensuring both confidentiality and integrity in message exchanges.